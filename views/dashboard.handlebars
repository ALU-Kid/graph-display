<!-- views/dashboard.handlebars - Complete Enhanced Dashboard -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}} - Enhanced GitHub Contribution Animator</title>
  <style>
    :root {
      --bg-primary: #0d1117;
      --bg-secondary: #161b22;
      --bg-tertiary: #21262d;
      --text-primary: #f0f6fc;
      --text-secondary: #c9d1d9;
      --text-muted: #8b949e;
      --border-color: #30363d;
      --accent-green: #39d353;
      --accent-blue: #58a6ff;
      --accent-purple: #bc8cff;
      --accent-orange: #ffab70;
      --accent-red: #ff6b6b;
      --accent-yellow: #f9e71e;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
      min-height: 100vh;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 2px solid var(--border-color);
    }
    
    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      background: linear-gradient(45deg, var(--accent-green), var(--accent-blue));
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .header-controls {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
    }
    
    .btn-primary {
      background: var(--accent-green);
      color: white;
      box-shadow: 0 4px 12px rgba(57, 211, 83, 0.3);
    }
    
    .btn-primary:hover {
      background: #2ea043;
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(57, 211, 83, 0.4);
    }
    
    .btn-secondary {
      background: var(--bg-tertiary);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
    }
    
    .btn-secondary:hover {
      background: var(--bg-secondary);
      border-color: var(--accent-blue);
    }
    
    .btn-ai {
      background: linear-gradient(45deg, var(--accent-purple), var(--accent-blue));
      color: white;
      box-shadow: 0 4px 12px rgba(188, 140, 255, 0.3);
    }
    
    .btn-ai:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(188, 140, 255, 0.4);
    }
    
    .main-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 30px;
      margin-bottom: 30px;
    }
    
    .card {
      background: var(--bg-secondary);
      border-radius: 12px;
      padding: 25px;
      border: 1px solid var(--border-color);
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .section-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .message-input-container {
      position: relative;
      margin-bottom: 20px;
    }
    
    .message-input {
      width: 100%;
      padding: 15px 20px;
      background: var(--bg-tertiary);
      border: 2px solid var(--border-color);
      border-radius: 10px;
      color: var(--text-primary);
      font-size: 16px;
      font-family: 'SF Mono', Monaco, monospace;
      transition: all 0.3s ease;
    }
    
    .message-input:focus {
      outline: none;
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 4px rgba(88, 166, 255, 0.1);
      background: var(--bg-secondary);
    }
    
    .char-counter {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 12px;
      color: var(--text-muted);
      font-weight: 600;
    }
    
    .char-counter.warning {
      color: var(--accent-orange);
    }
    
    .char-counter.error {
      color: var(--accent-red);
    }
    
    .preview-container {
      background: var(--bg-tertiary);
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 20px;
      min-height: 200px;
      position: relative;
      border: 1px solid var(--border-color);
    }
    
    .preview-placeholder {
      text-align: center;
      color: var(--text-muted);
      margin-top: 60px;
      font-style: italic;
    }
    
    .controls-row {
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .control-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .control-group label {
      font-weight: 500;
      color: var(--text-secondary);
      min-width: 80px;
    }
    
    .select-input {
      padding: 8px 12px;
      background: var(--bg-tertiary);
      border: 1px solid var(--border-color);
      border-radius: 6px;
      color: var(--text-primary);
      min-width: 120px;
    }
    
    .stats-sidebar {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-bottom: 15px;
    }
    
    .stat-item {
      background: var(--bg-tertiary);
      border-radius: 8px;
      padding: 20px;
      text-align: center;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }
    
    .stat-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--accent-green);
      margin-bottom: 5px;
    }
    
    .stat-label {
      font-size: 0.875rem;
      color: var(--text-muted);
      font-weight: 500;
    }
    
    .weather-display {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 15px;
      background: var(--bg-tertiary);
      border-radius: 10px;
      margin-bottom: 15px;
      border: 1px solid var(--border-color);
    }
    
    .weather-icon {
      font-size: 2rem;
    }
    
    .weather-info {
      flex: 1;
    }
    
    .weather-temp {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .weather-desc {
      font-size: 0.875rem;
      color: var(--text-muted);
    }
    
    .weather-details {
      display: flex;
      gap: 15px;
      margin-top: 5px;
      font-size: 0.75rem;
      color: var(--text-muted);
    }
    
    .queue-container {
      background: var(--bg-tertiary);
      border-radius: 10px;
      padding: 15px;
      max-height: 350px;
      overflow-y: auto;
      border: 1px solid var(--border-color);
    }
    
    .queue-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 15px;
      background: var(--bg-secondary);
      border-radius: 8px;
      margin-bottom: 10px;
      font-family: 'SF Mono', Monaco, monospace;
      font-size: 0.875rem;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }
    
    .queue-item:hover {
      transform: translateX(5px);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }
    
    .queue-item:last-child {
      margin-bottom: 0;
    }
    
    .queue-actions {
      display: flex;
      gap: 8px;
    }
    
    .icon-btn {
      padding: 6px 8px;
      background: transparent;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 12px;
    }
    
    .icon-btn:hover {
      background: var(--bg-tertiary);
      color: var(--text-primary);
      transform: scale(1.1);
    }
    
    .bottom-section {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px;
    }
    
    .generator-controls {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .control-input {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
    
    .control-input label {
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 0.875rem;
    }
    
    .number-input {
      padding: 8px 12px;
      background: var(--bg-tertiary);
      border: 1px solid var(--border-color);
      border-radius: 6px;
      color: var(--text-primary);
      width: 100px;
    }
    
    .toggle-switch {
      position: relative;
      width: 50px;
      height: 24px;
      background: var(--bg-tertiary);
      border-radius: 12px;
      cursor: pointer;
      transition: background 0.3s ease;
      border: 1px solid var(--border-color);
    }
    
    .toggle-switch.active {
      background: var(--accent-green);
      border-color: var(--accent-green);
    }
    
    .toggle-switch::after {
      content: '';
      position: absolute;
      top: 2px;
      left: 2px;
      width: 18px;
      height: 18px;
      background: white;
      border-radius: 50%;
      transition: transform 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .toggle-switch.active::after {
      transform: translateX(26px);
    }
    
    .generated-messages {
      background: var(--bg-tertiary);
      border-radius: 10px;
      padding: 15px;
      min-height: 200px;
      border: 1px solid var(--border-color);
      max-height: 300px;
      overflow-y: auto;
    }
    
    .generated-message {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 15px;
      background: var(--bg-secondary);
      border-radius: 8px;
      margin-bottom: 10px;
      font-family: 'SF Mono', Monaco, monospace;
      font-size: 0.875rem;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }
    
    .generated-message:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    .message-actions {
      display: flex;
      gap: 5px;
    }
    
    .status-indicator {
      display: inline-flex;
      align-items: center;
      gap: 5px;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .status-active {
      background: rgba(57, 211, 83, 0.2);
      color: var(--accent-green);
    }
    
    .status-pending {
      background: rgba(255, 171, 112, 0.2);
      color: var(--accent-orange);
    }
    
    .status-processing {
      background: rgba(88, 166, 255, 0.2);
      color: var(--accent-blue);
    }
    
    .history-section {
      margin-top: 20px;
    }
    
    .history-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 12px;
      background: var(--bg-tertiary);
      border-radius: 6px;
      margin-bottom: 8px;
      font-size: 0.875rem;
      border: 1px solid var(--border-color);
    }
    
    .history-message {
      font-family: 'SF Mono', Monaco, monospace;
      flex: 1;
    }
    
    .history-meta {
      display: flex;
      gap: 10px;
      color: var(--text-muted);
      font-size: 0.75rem;
    }
    
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      z-index: 1000;
      animation: slideIn 0.3s ease;
      max-width: 400px;
    }
    
    .notification.success {
      background: var(--accent-green);
    }
    
    .notification.error {
      background: var(--accent-red);
    }
    
    .notification.info {
      background: var(--accent-blue);
    }
    
    .notification.warning {
      background: var(--accent-orange);
    }
    
    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
    
    @keyframes fadeOut {
      from {
        opacity: 1;
      }
      to {
        opacity: 0;
      }
    }
    
    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 2px solid var(--border-color);
      border-top: 2px solid var(--accent-blue);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .empty-state {
      text-align: center;
      color: var(--text-muted);
      padding: 40px 20px;
      font-style: italic;
    }
    
    .empty-state-icon {
      font-size: 3rem;
      margin-bottom: 10px;
      opacity: 0.5;
    }
    
    .pulse {
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% {
        opacity: 1;
      }
      50% {
        opacity: 0.5;
      }
      100% {
        opacity: 1;
      }
    }
    
    @media (max-width: 1024px) {
      .main-grid,
      .bottom-section {
        grid-template-columns: 1fr;
      }
      
      .generator-controls {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      
      .header {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
      }
      
      .header h1 {
        font-size: 2rem;
        text-align: center;
      }
      
      .header-controls {
        justify-content: center;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
      
      .controls-row {
        flex-direction: column;
        align-items: stretch;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Header -->
    <header class="header">
      <h1>
        🚀 GitGraph Animator
        <span style="font-size: 0.5em; color: var(--accent-purple);">Enhanced</span>
      </h1>
      <div class="header-controls">
        <button class="btn btn-secondary" onclick="exportData()">
          📤 Export Data
        </button>
        <button class="btn btn-ai" onclick="generateWithAI()">
          🧠 ChatGPT Generate
        </button>
        <button class="btn btn-primary" onclick="processQueueNow()">
          ⚡ Process Now
        </button>
      </div>
    </header>

    <!-- Status Bar -->
    <div style="display: flex; gap: 20px; margin-bottom: 20px; align-items: center;">
      <div class="status-indicator {{#if currentMessage}}status-processing{{else}}status-pending{{/if}}">
        {{#if currentMessage}}
          🎨 Processing: {{currentMessage}}
        {{else}}
          📋 Queue: {{messageQueue.length}} messages
        {{/if}}
      </div>
      <div class="status-indicator status-active">
        ⚡ {{stats.kwhCharged}}kWh • 🌤️ {{stats.weather.temp}}°C
      </div>
    </div>

    <!-- Main Content Grid -->
    <div class="main-grid">
      <!-- Message Preview Section -->
      <section class="card">
        <div class="section-header">
          <h2 class="section-title">🎨 Message Preview & Input</h2>
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-secondary" onclick="clearPreview()">Clear</button>
            <button class="btn btn-primary" onclick="addMessage()">Add to Queue</button>
          </div>
        </div>
        
        <div class="message-input-container">
          <input 
            type="text" 
            class="message-input" 
            id="message-input"
            placeholder="Type your message here (max 30 characters)..."
            maxlength="30"
            oninput="updateCharCounter()"
          >
          <span class="char-counter" id="char-counter">0/30</span>
        </div>
        
        <div class="preview-container" id="pixel-preview">
          <div class="preview-placeholder">
            <div class="empty-state-icon">🎯</div>
            <div>Type a message above to see how it will look on your GitHub contribution graph</div>
          </div>
        </div>
        
        <div class="controls-row">
          <div class="control-group">
            <label>Font Style:</label>
            <select id="font-style" class="select-input" onchange="updatePreview()">
              <option value="pixel">Pixel (Default)</option>
              <option value="slim">Slim (Compact)</option>
              <option value="bold">Bold (Wide)</option>
            </select>
          </div>
          <div class="control-group">
            <label>Preview:</label>
            <button class="btn btn-secondary" onclick="generatePreview()">
              🔄 Update Preview
            </button>
          </div>
        </div>
      </section>

      <!-- Stats & Queue Sidebar -->
      <aside class="stats-sidebar">
        <!-- Live Stats -->
        <div class="card">
          <h3 class="section-title">📊 Live Statistics</h3>
          <div class="weather-display">
            <span class="weather-icon">🌫️</span>
            <div class="weather-info">
              <div class="weather-temp">{{stats.weather.temp}}°C</div>
              <div class="weather-desc">{{stats.weather.condition}}</div>
              <div class="weather-details">
                <span>💨 {{stats.weather.wind}} km/h</span>
                <span>💧 {{stats.weather.humidity}}%</span>
              </div>
            </div>
          </div>
          <div class="stats-grid">
            <div class="stat-item">
              <div class="stat-value">{{stats.kwhCharged}}</div>
              <div class="stat-label">kWh Charged</div>
            </div>
            <div class="stat-item">
              <div class="stat-value">{{stats.sessions}}</div>
              <div class="stat-label">Sessions</div>
            </div>
          </div>
        </div>

        <!-- Message Queue -->
        <div class="card">
          <div class="section-header">
            <h3 class="section-title">📋 Message Queue</h3>
            <button class="btn btn-primary" onclick="openAddMessageModal()">
              ➕ Add
            </button>
          </div>
          
          <div class="queue-container" id="message-queue">
            {{#if messageQueue.length}}
              {{#each messageQueue}}
                <div class="queue-item" data-message="{{this}}">
                  <span class="queue-message">{{this}}</span>
                  <div class="queue-actions">
                    <button class="icon-btn" onclick="previewMessage('{{this}}')" title="Preview">👁️</button>
                    <button class="icon-btn" onclick="promoteMessage('{{this}}')" title="Make Current">⬆️</button>
                    <button class="icon-btn" onclick="removeMessage('{{this}}')" title="Remove">🗑️</button>
                  </div>
                </div>
              {{/each}}
            {{else}}
              <div class="empty-state">
                <div class="empty-state-icon">📭</div>
                <div>No messages in queue</div>
                <small>Add messages or generate them automatically</small>
              </div>
            {{/if}}
          </div>
        </div>
      </aside>
    </div>

    <!-- Bottom Section -->
    <div class="bottom-section">
      <!-- Smart Message Generator -->
      <section class="card">
        <div class="section-header">
          <h2 class="section-title">🤖 Smart Message Generator</h2>
          <button class="btn btn-primary" onclick="generateSmartMessages()">
            ✨ Generate
          </button>
        </div>
        
        <div class="generator-controls">
          <div class="control-input">
            <label>Message Count:</label>
            <input type="number" id="message-count" class="number-input" value="5" min="1" max="10">
          </div>
          <div class="control-input">
            <label>Use ChatGPT:</label>
            <div class="toggle-switch" id="ai-toggle" onclick="toggleAI(this)"></div>
          </div>
          <div class="control-input">
            <label>Weather Context:</label>
            <div class="toggle-switch active" id="weather-toggle" onclick="toggleWeather(this)"></div>
          </div>
          <div class="control-input">
            <label>Energy Context:</label>
            <div class="toggle-switch active" id="energy-toggle" onclick="toggleEnergy(this)"></div>
          </div>
        </div>
        
        <div class="generated-messages" id="generated-messages">
          <div class="empty-state">
            <div class="empty-state-icon">🎲</div>
            <div>Click "Generate" to create smart messages</div>
            <small>Messages will be based on your current weather and energy data</small>
          </div>
        </div>
      </section>

      <!-- Recent History -->
      <section class="card">
        <div class="section-header">
          <h2 class="section-title">📈 Recent Activity</h2>
          <button class="btn btn-secondary" onclick="refreshHistory()">
            🔄 Refresh
          </button>
        </div>
        
        <div class="history-section">
          <div class="history-item">
            <div class="history-message">SYSTEM INITIALIZED</div>
            <div class="history-meta">
              <span>System</span>
              <span class="status-indicator status-active">ready</span>
            </div>
          </div>
          <div class="empty-state">
            <div class="empty-state-icon">📜</div>
            <div>Recent messages will appear here</div>
            <small>Start by adding or generating messages</small>
          </div>
        </div>
      </section>
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    // Global state
    let settings = {
      useAI: false,
      useWeather: true,
      useEnergy: true
    };

    // Initialize the dashboard
    document.addEventListener('DOMContentLoaded', function() {
      console.log('🚀 Dashboard initialized');
      updateCharCounter();
      loadCurrentMessage();
      showNotification('Enhanced GitGraph Animator ready! 🚀', 'success');
      
      // Auto-refresh stats every 5 minutes
      setInterval(refreshStats, 5 * 60 * 1000);
    });

    // Character counter
    function updateCharCounter() {
      const input = document.getElementById('message-input');
      const counter = document.getElementById('char-counter');
      const length = input.value.length;
      
      counter.textContent = length + '/30';
      counter.className = 'char-counter';
      
      if (length > 25) counter.classList.add('warning');
      if (length > 30) counter.classList.add('error');
    }

    // Preview functions
    function generatePreview() {
      const message = document.getElementById('message-input').value.trim().toUpperCase();
      const preview = document.getElementById('pixel-preview');
      
      if (!message) {
        preview.innerHTML = `
          <div class="preview-placeholder">
            <div class="empty-state-icon">🎯</div>
            <div>Type a message above to see how it will look on your GitHub contribution graph</div>
          </div>
        `;
        return;
      }
      
      // Show loading state
      preview.innerHTML = `
        <div style="text-align: center; padding: 60px;">
          <div class="loading"></div>
          <div style="margin-top: 15px;">Generating preview...</div>
        </div>
      `;
      
      // Call preview API
      fetch('/api/preview', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: message })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          preview.innerHTML = `
            <div style="text-align: center;">
              <div style="margin-bottom: 15px; color: var(--accent-green);">
                ✅ Preview for: <strong>"${data.message}"</strong>
              </div>
              <div style="color: var(--text-muted); font-size: 0.875rem;">
                Estimated commits: ${data.estimatedCommits || 'calculating...'}
              </div>
              <div style="margin-top: 15px; padding: 20px; background: var(--bg-secondary); border-radius: 8px;">
                📊 This will create a pattern across your GitHub contribution graph
              </div>
            </div>
          `;
        } else {
          showNotification('Preview failed: ' + data.error, 'error');
        }
      })
      .catch(error => {
        console.error('Preview error:', error);
        showNotification('Failed to generate preview', 'error');
        preview.innerHTML = `
          <div class="preview-placeholder">
            <div class="empty-state-icon">⚠️</div>
            <div>Preview failed - check console for details</div>
          </div>
        `;
      });
    }

    function updatePreview() {
      generatePreview();
    }

    function clearPreview() {
      document.getElementById('message-input').value = '';
      updateCharCounter();
      document.getElementById('pixel-preview').innerHTML = `
        <div class="preview-placeholder">
          <div class="empty-state-icon">🎯</div>
          <div>Type a message above to see how it will look on your GitHub contribution graph</div>
        </div>
      `;
    }

    // Message management
    async function addMessage() {
      const input = document.getElementById('message-input');
      const message = input.value.trim().toUpperCase();
      
      if (!message) {
        showNotification('Please enter a message first', 'warning');
        return;
      }
      
      if (message.length > 30) {
        showNotification('Message too long (max 30 characters)', 'error');
        return;
      }
      
      try {
        const response = await fetch('/api/messages', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message: message })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showNotification('Message added to queue!', 'success');
          clearPreview();
          setTimeout(() => location.reload(), 1000);
        } else {
          showNotification('Failed to add message: ' + data.error, 'error');
        }
      } catch (error) {
        showNotification('Network error: ' + error.message, 'error');
      }
    }

    function previewMessage(message) {
      document.getElementById('message-input').value = message;
      updateCharCounter();
      generatePreview();
    }

    async function promoteMessage(message) {
      try {
        const response = await fetch('/api/rotate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          showNotification('Queue rotated!', 'success');
          setTimeout(() => location.reload(), 1000);
        }
      } catch (error) {
        showNotification('Failed to rotate queue', 'error');
      }
    }

    function removeMessage(message) {
      if (confirm('Remove "' + message + '" from queue?')) {
        showNotification('Remove functionality coming in next update', 'info');
      }
    }

    // Smart message generation
    async function generateSmartMessages() {
      const button = event.target;
      const originalText = button.textContent;
      button.innerHTML = '<span class="loading"></span> Generating...';
      button.disabled = true;
      
      try {
        const count = document.getElementById('message-count').value;
        const response = await fetch('/api/generate-smart', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            count: parseInt(count),
            useAI: settings.useAI
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          displayGeneratedMessages(data.messages, data.context);
          showNotification('Generated ' + data.messages.length + ' messages!', 'success');
          
          if (data.addedToQueue > 0) {
            setTimeout(() => location.reload(), 2000);
          }
        } else {
          throw new Error(data.error || 'Generation failed');
        }
      } catch (error) {
        console.error('Generation error:', error);
        showNotification('Failed to generate: ' + error.message, 'error');
      } finally {
        button.textContent = originalText;
        button.disabled = false;
      }
    }

    async function generateWithAI() {
      const button = event.target;
      const originalText = button.textContent;
      button.innerHTML = '<span class="loading"></span> ChatGPT Working...';
      button.disabled = true;
      
      try {
        const response = await fetch('/api/generate-smart', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            count: 5,
            useAI: true
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          displayGeneratedMessages(data.messages, data.context);
          showNotification('ChatGPT generated ' + data.messages.length + ' messages!', 'success');
          setTimeout(() => location.reload(), 2000);
        } else {
          throw new Error(data.error || 'AI generation failed');
        }
      } catch (error) {
        console.error('AI generation error:', error);
        showNotification('ChatGPT failed: ' + error.message, 'error');
      } finally {
        button.textContent = originalText;
        button.disabled = false;
      }
    }

    function displayGeneratedMessages(messages, context) {
      const container = document.getElementById('generated-messages');
      container.innerHTML = '';
      
      // Show context
      if (context) {
        const contextDiv = document.createElement('div');
        contextDiv.style.cssText = 'margin-bottom: 15px; padding: 10px; background: var(--bg-secondary); border-radius: 6px; font-size: 0.875rem; color: var(--text-muted);';
        contextDiv.innerHTML = `
          <strong>Generated using:</strong><br>
          🌤️ ${context.weather ? context.weather.condition + ' ' + context.weather.temp + '°C' : 'No weather data'}<br>
          ⚡ ${context.energy ? context.energy.kwhCharged + 'kWh, ' + context.energy.sessions + ' sessions' : 'No energy data'}<br>
          🤖 Method: ${context.method || 'Smart Templates'}
        `;
        container.appendChild(contextDiv);
      }
      
      messages.forEach((message, index) => {
        const messageEl = document.createElement('div');
        messageEl.className = 'generated-message';
        messageEl.innerHTML = `
          <span>${message}</span>
          <div class="message-actions">
            <button class="icon-btn" onclick="previewMessage('${message}')" title="Preview">👁️</button>
            <button class="icon-btn" onclick="copyMessage('${message}')" title="Copy">📋</button>
          </div>
        `;
        container.appendChild(messageEl);
      });
    }

    function copyMessage(message) {
      navigator.clipboard.writeText(message).then(() => {
        showNotification('Copied: ' + message, 'info');
      });
    }

    // Toggle functions
    function toggleAI(element) {
      element.classList.toggle('active');
      settings.useAI = element.classList.contains('active');
    }

    function toggleWeather(element) {
      element.classList.toggle('active');
      settings.useWeather = element.classList.contains('active');
    }

    function toggleEnergy(element) {
      element.classList.toggle('active');
      settings.useEnergy = element.classList.contains('active');
    }

    // Utility functions
    async function processQueueNow() {
      const button = event.target;
      const originalText = button.textContent;
      button.innerHTML = '<span class="loading"></span> Processing...';
      button.disabled = true;
      
      try {
        const response = await fetch('/api/process-queue', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
          showNotification('Queue processed successfully!', 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          throw new Error(data.error || 'Processing failed');
        }
      } catch (error) {
        showNotification('Failed to process queue: ' + error.message, 'error');
      } finally {
        button.textContent = originalText;
        button.disabled = false;
      }
    }

    function exportData() {
      window.open('/api/export', '_blank');
      showNotification('Data export started', 'info');
    }

    async function refreshStats() {
      try {
        const response = await fetch('/api/stats');
        const data = await response.json();
        console.log('📊 Stats refreshed:', data);
        // Update UI with new stats if needed
      } catch (error) {
        console.error('Failed to refresh stats:', error);
      }
    }

    function refreshHistory() {
      location.reload();
    }

    function loadCurrentMessage() {
      const currentMessage = '{{currentMessage}}';
      if (currentMessage && currentMessage !== 'null' && currentMessage !== '') {
        document.getElementById('message-input').value = currentMessage;
        updateCharCounter();
        generatePreview();
      }
    }

    function openAddMessageModal() {
      const message = prompt('Enter a new message (max 30 characters):');
      if (message && message.trim()) {
        document.getElementById('message-input').value = message.trim().toUpperCase();
        updateCharCounter();
        generatePreview();
      }
    }

    // Notification system
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.animation = 'fadeOut 0.3s ease';
        setTimeout(() => {
          if (notification.parentNode) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 4000);
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'Enter':
            e.preventDefault();
            addMessage();
            break;
          case 'r':
            e.preventDefault();
            generatePreview();
            break;
          case 'g':
            e.preventDefault();
            generateSmartMessages();
            break;
        }
      }
    });

    console.log('✨ Enhanced GitGraph Animator Dashboard Ready!');
    console.log('⌨️ Keyboard shortcuts: Ctrl+Enter (add), Ctrl+R (preview), Ctrl+G (generate)');
  </script>
</body>
</html>