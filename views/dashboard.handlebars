<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GitGraph Animator - Professional Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --bg-primary: #0d1117;
      --bg-secondary: #161b22;
      --bg-tertiary: #21262d;
      --bg-hover: #30363d;
      --text-primary: #f0f6fc;
      --text-secondary: #c9d1d9;
      --text-muted: #8b949e;
      --border-color: #30363d;
      --border-active: #58a6ff;
      --accent-green: #39d353;
      --accent-blue: #58a6ff;
      --accent-purple: #bc8cff;
      --accent-orange: #ffab70;
      --accent-red: #ff6b6b;
      --accent-yellow: #f9e71e;
      --shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.12);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
      min-height: 100vh;
      overflow-x: hidden;
    }

    /* Layout */
    .container {
      max-width: 1600px;
      margin: 0 auto;
      padding: 20px;
    }

    /* Header Styles */
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding: 20px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .logo h1 {
      font-size: 2.5rem;
      font-weight: 700;
      background: linear-gradient(135deg, var(--accent-green), var(--accent-blue));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .logo-badge {
      background: linear-gradient(135deg, var(--accent-purple), var(--accent-blue));
      color: white;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      animation: glow 2s ease-in-out infinite;
    }

    @keyframes glow {
      0%, 100% { box-shadow: 0 0 20px rgba(188, 140, 255, 0.3); }
      50% { box-shadow: 0 0 30px rgba(188, 140, 255, 0.5); }
    }

    /* Status Bar */
    .status-bar {
      display: flex;
      gap: 15px;
      margin-bottom: 30px;
      padding: 15px;
      background: var(--bg-secondary);
      border-radius: 12px;
      border: 1px solid var(--border-color);
      align-items: center;
      flex-wrap: wrap;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      background: var(--bg-tertiary);
      border-radius: 8px;
      font-size: 0.875rem;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .status-item:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .status-dot.active { background: var(--accent-green); }
    .status-dot.processing { background: var(--accent-blue); }
    .status-dot.warning { background: var(--accent-orange); }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Main Grid */
    .main-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 25px;
      margin-bottom: 30px;
    }

    .full-width {
      grid-column: 1 / -1;
    }

    /* Card Styles */
    .card {
      background: var(--bg-secondary);
      border-radius: 16px;
      padding: 24px;
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow);
      transition: all 0.3s ease;
    }

    .card:hover {
      border-color: var(--border-active);
      transform: translateY(-2px);
      box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .card-title {
      font-size: 1.25rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    /* Live SVG Preview */
    .svg-preview-container {
      background: var(--bg-tertiary);
      border-radius: 12px;
      padding: 20px;
      min-height: 300px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px dashed var(--border-color);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .svg-preview-container.loading {
      border-color: var(--accent-blue);
      animation: borderPulse 2s infinite;
    }

    @keyframes borderPulse {
      0%, 100% { border-color: var(--accent-blue); opacity: 0.5; }
      50% { border-color: var(--accent-blue); opacity: 1; }
    }

    .svg-preview {
      width: 100%;
      height: auto;
      max-height: 400px;
      border-radius: 8px;
    }

    /* Message Input */
    .message-input-group {
      position: relative;
      margin-bottom: 20px;
    }

    .message-input {
      width: 100%;
      padding: 16px 20px;
      padding-right: 120px;
      background: var(--bg-tertiary);
      border: 2px solid var(--border-color);
      border-radius: 12px;
      color: var(--text-primary);
      font-size: 16px;
      font-family: 'SF Mono', Monaco, 'Courier New', monospace;
      transition: all 0.3s ease;
    }

    .message-input:focus {
      outline: none;
      border-color: var(--accent-blue);
      background: var(--bg-primary);
      box-shadow: 0 0 0 4px rgba(88, 166, 255, 0.1);
    }

    .input-actions {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .char-counter {
      font-size: 0.75rem;
      font-weight: 600;
      padding: 4px 8px;
      background: var(--bg-primary);
      border-radius: 6px;
      transition: all 0.3s ease;
    }

    .char-counter.warning { color: var(--accent-orange); }
    .char-counter.error { color: var(--accent-red); }

    /* Button Styles */
    .btn {
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      font-weight: 600;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      text-decoration: none;
      position: relative;
      overflow: hidden;
    }

    .btn:before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }

    .btn:hover:before {
      width: 300px;
      height: 300px;
    }

    .btn-primary {
      background: var(--accent-green);
      color: white;
      box-shadow: 0 4px 14px rgba(57, 211, 83, 0.3);
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(57, 211, 83, 0.4);
    }

    .btn-secondary {
      background: var(--bg-tertiary);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
    }

    .btn-secondary:hover {
      background: var(--bg-hover);
      border-color: var(--accent-blue);
    }

    .btn-ai {
      background: linear-gradient(135deg, var(--accent-purple), var(--accent-blue));
      color: white;
      box-shadow: 0 4px 14px rgba(188, 140, 255, 0.3);
    }

    .btn-ai:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(188, 140, 255, 0.4);
    }

    .btn-sm {
      padding: 6px 12px;
      font-size: 0.75rem;
    }

    /* Queue Styles */
    .queue-container {
      background: var(--bg-tertiary);
      border-radius: 12px;
      padding: 16px;
      max-height: 400px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: var(--border-color) transparent;
    }

    .queue-container::-webkit-scrollbar {
      width: 8px;
    }

    .queue-container::-webkit-scrollbar-track {
      background: transparent;
    }

    .queue-container::-webkit-scrollbar-thumb {
      background: var(--border-color);
      border-radius: 4px;
    }

    .queue-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 16px;
      background: var(--bg-secondary);
      border-radius: 8px;
      margin-bottom: 10px;
      font-family: 'SF Mono', Monaco, monospace;
      font-size: 0.875rem;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .queue-item:before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      width: 3px;
      background: var(--accent-green);
      transform: scaleY(0);
      transition: transform 0.3s ease;
    }

    .queue-item:hover {
      transform: translateX(5px);
      border-color: var(--accent-blue);
    }

    .queue-item:hover:before {
      transform: scaleY(1);
    }

    .queue-item.current {
      border-color: var(--accent-green);
      background: linear-gradient(90deg, rgba(57, 211, 83, 0.1), transparent);
    }

    .queue-item.current:before {
      transform: scaleY(1);
      animation: pulse 2s infinite;
    }

    /* Stats Grid */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }

    .stat-card {
      background: var(--bg-tertiary);
      border-radius: 12px;
      padding: 20px;
      text-align: center;
      border: 1px solid var(--border-color);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .stat-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow);
      border-color: var(--accent-blue);
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      background: linear-gradient(135deg, var(--accent-green), var(--accent-blue));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 5px;
    }

    .stat-label {
      font-size: 0.75rem;
      color: var(--text-muted);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* Weather Widget */
    .weather-widget {
      display: flex;
      align-items: center;
      gap: 20px;
      padding: 20px;
      background: linear-gradient(135deg, var(--bg-tertiary), var(--bg-secondary));
      border-radius: 12px;
      margin-bottom: 20px;
      position: relative;
      overflow: hidden;
    }

    .weather-widget:before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(88, 166, 255, 0.1), transparent);
      animation: rotate 20s linear infinite;
    }

    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    .weather-icon {
      font-size: 3rem;
      z-index: 1;
    }

    .weather-info {
      flex: 1;
      z-index: 1;
    }

    .weather-temp {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 5px;
    }

    .weather-details {
      display: flex;
      gap: 15px;
      font-size: 0.875rem;
      color: var(--text-muted);
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: var(--text-muted);
    }

    .empty-icon {
      font-size: 4rem;
      margin-bottom: 15px;
      opacity: 0.3;
    }

    /* Loading State */
    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 2px solid var(--border-color);
      border-top-color: var(--accent-blue);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      box-shadow: var(--shadow);
      z-index: 1000;
      animation: slideIn 0.3s ease;
      max-width: 400px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .notification.success { background: var(--accent-green); }
    .notification.error { background: var(--accent-red); }
    .notification.info { background: var(--accent-blue); }
    .notification.warning { background: var(--accent-orange); }

    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    /* Responsive */
    @media (max-width: 1024px) {
      .main-grid {
        grid-template-columns: 1fr;
      }
    }

    @media (max-width: 768px) {
      .header {
        flex-direction: column;
        gap: 20px;
      }

      .status-bar {
        flex-direction: column;
        align-items: stretch;
      }

      .card {
        padding: 16px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Header -->
    <header class="header">
      <div class="logo">
        <h1>GitGraph Animator</h1>
        <span class="logo-badge">PRO</span>
      </div>
      <div class="header-controls">
        <button class="btn btn-secondary" onclick="openSettings()">
          ⚙️ Settings
        </button>
        <button class="btn btn-secondary" onclick="exportData()">
          📤 Export
        </button>
        <button class="btn btn-ai" onclick="generateWithAI()">
          🤖 AI Generate
        </button>
        <button class="btn btn-primary" onclick="processQueue()">
          ⚡ Process Now
        </button>
      </div>
    </header>

    <!-- Status Bar -->
    <div class="status-bar">
      <div class="status-item">
        <span class="status-dot {{#if currentMessage}}processing{{else}}active{{/if}}"></span>
        <span>{{#if currentMessage}}Processing: {{currentMessage}}{{else}}Ready{{/if}}</span>
      </div>
      <div class="status-item">
        <span>📋</span>
        <span>Queue: {{messageQueue.length}}</span>
      </div>
      <div class="status-item">
        <span>⚡</span>
        <span>{{stats.kwhCharged}} kWh</span>
      </div>
      <div class="status-item">
        <span>🌡️</span>
        <span>{{stats.weather.temp}}°C</span>
      </div>
      <div class="status-item">
        <span>📊</span>
        <span>{{messageHistory.length}} Processed</span>
      </div>
    </div>

    <!-- Main Grid -->
    <div class="main-grid">
      <!-- Live SVG Preview -->
      <div class="card full-width">
        <div class="card-header">
          <h2 class="card-title">🎨 Live SVG Preview</h2>
          <div class="controls">
            <select id="theme-select" class="btn btn-sm btn-secondary" onchange="updateSVGTheme()">
              <option value="dark">Dark Theme</option>
              <option value="light">Light Theme</option>
            </select>
            <select id="animation-select" class="btn btn-sm btn-secondary" onchange="updateSVGAnimation()">
              <option value="wave">Wave Animation</option>
              <option value="fade">Fade Animation</option>
              <option value="spiral">Spiral Animation</option>
              <option value="random">Random Animation</option>
            </select>
            <button class="btn btn-sm btn-primary" onclick="refreshSVG()">
              🔄 Refresh
            </button>
          </div>
        </div>
        <div class="svg-preview-container" id="svg-container">
          <img src="/svg" alt="GitGraph Preview" class="svg-preview" id="svg-preview" />
        </div>
        <div style="margin-top: 15px; text-align: center;">
          <code style="padding: 8px 12px; background: var(--bg-tertiary); border-radius: 6px; font-size: 0.875rem;">
            ![GitGraph]({{embedUrl}})
          </code>
          <button class="btn btn-sm btn-secondary" onclick="copySVGUrl()" style="margin-left: 10px;">
            📋 Copy
          </button>
        </div>
      </div>

      <!-- Message Input & Queue -->
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">📝 Message Input</h2>
        </div>
        
        <div class="message-input-group">
          <input 
            type="text" 
            class="message-input" 
            id="message-input"
            placeholder="Enter your message (max 30 chars)..."
            maxlength="30"
            onkeyup="handleMessageInput(event)"
            oninput="updateCharCounter()"
          />
          <div class="input-actions">
            <span class="char-counter" id="char-counter">0/30</span>
            <button class="btn btn-sm btn-primary" onclick="addMessage()">
              Add
            </button>
          </div>
        </div>

        <div class="card-header" style="margin-top: 30px;">
          <h3 class="card-title">📋 Message Queue</h3>
          <button class="btn btn-sm btn-secondary" onclick="rotateQueue()">
            🔄 Rotate
          </button>
        </div>
        
        <div class="queue-container">
          {{#if currentMessage}}
            <div class="queue-item current">
              <span>{{currentMessage}}</span>
              <span style="color: var(--accent-green);">▶️ Current</span>
            </div>
          {{/if}}
          
          {{#each messageQueue}}
            <div class="queue-item" data-message="{{this}}">
              <span>{{this}}</span>
              <div style="display: flex; gap: 5px;">
                <button class="btn btn-sm btn-secondary" onclick="previewMessage('{{this}}')" title="Preview">
                  👁️
                </button>
                <button class="btn btn-sm btn-secondary" onclick="moveToTop('{{this}}')" title="Move to top">
                  ⬆️
                </button>
              </div>
            </div>
          {{/each}}
          
          {{#unless messageQueue.length}}
            {{#unless currentMessage}}
              <div class="empty-state">
                <div class="empty-icon">📭</div>
                <p>No messages in queue</p>
                <p style="font-size: 0.875rem;">Add messages or generate them automatically</p>
              </div>
            {{/unless}}
          {{/unless}}
        </div>
      </div>

      <!-- Stats & Weather -->
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">📊 Live Statistics</h2>
          <button class="btn btn-sm btn-secondary" onclick="refreshStats()">
            🔄 Refresh
          </button>
        </div>
        
        <div class="weather-widget">
          <span class="weather-icon">{{#if stats.weather.condition}}☁️{{else}}🌤️{{/if}}</span>
          <div class="weather-info">
            <div class="weather-temp">{{stats.weather.temp}}°C</div>
            <div style="color: var(--text-secondary); margin-bottom: 5px;">{{stats.weather.condition}}</div>
            <div class="weather-details">
              <span>💨 {{stats.weather.wind}} km/h</span>
              <span>💧 {{stats.weather.humidity}}%</span>
            </div>
          </div>
        </div>
        
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">{{stats.kwhCharged}}</div>
            <div class="stat-label">kWh Charged</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">{{stats.sessions}}</div>
            <div class="stat-label">Sessions</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">{{messageQueue.length}}</div>
            <div class="stat-label">Queued</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">{{messageHistory.length}}</div>
            <div class="stat-label">Processed</div>
          </div>
        </div>

        <div class="card-header" style="margin-top: 20px;">
          <h3 class="card-title">🤖 Smart Generator</h3>
        </div>
        
        <div style="display: flex; gap: 10px; margin-bottom: 15px;">
          <input type="number" id="gen-count" value="5" min="1" max="10" class="btn btn-secondary" style="width: 80px;">
          <button class="btn btn-primary" onclick="generateMessages()" style="flex: 1;">
            ✨ Generate Messages
          </button>
        </div>
        
        <div id="generated-messages" style="max-height: 200px; overflow-y: auto;">
          <!-- Generated messages will appear here -->
        </div>
      </div>
    </div>
  </div>

  <script>
    // Configuration
    const config = {
      svgUrl: '/svg',
      embedUrl: window.location.origin + '/svg',
      refreshInterval: 30000, // 30 seconds
      theme: 'dark',
      animation: 'wave'
    };

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      console.log('🚀 GitGraph Animator Dashboard Ready!');
      updateCharCounter();
      startAutoRefresh();
      
      // Set embed URL
      const embedUrl = '{{embedUrl}}' || config.embedUrl;
      document.querySelector('code').textContent = `![GitGraph](${embedUrl})`;
    });

    // Auto refresh SVG
    function startAutoRefresh() {
      setInterval(() => {
        const img = document.getElementById('svg-preview');
        img.src = config.svgUrl + '?t=' + Date.now() + '&theme=' + config.theme + '&animation=' + config.animation;
      }, config.refreshInterval);
    }

    // SVG Controls
    function refreshSVG() {
      const container = document.getElementById('svg-container');
      container.classList.add('loading');
      
      const img = document.getElementById('svg-preview');
      img.src = config.svgUrl + '?t=' + Date.now() + '&theme=' + config.theme + '&animation=' + config.animation;
      
      img.onload = () => {
        container.classList.remove('loading');
        showNotification('SVG refreshed!', 'success');
      };
    }

    function updateSVGTheme() {
      config.theme = document.getElementById('theme-select').value;
      refreshSVG();
    }

    function updateSVGAnimation() {
      config.animation = document.getElementById('animation-select').value;
      refreshSVG();
    }

    function copySVGUrl() {
      const url = config.embedUrl + '?theme=' + config.theme;
      navigator.clipboard.writeText(`![GitGraph](${url})`).then(() => {
        showNotification('SVG URL copied to clipboard!', 'success');
      });
    }

    // Message Management
    function updateCharCounter() {
      const input = document.getElementById('message-input');
      const counter = document.getElementById('char-counter');
      const length = input.value.length;
      
      counter.textContent = `${length}/30`;
      counter.className = 'char-counter';
      
      if (length > 25) counter.classList.add('warning');
      if (length >= 30) counter.classList.add('error');
    }

    function handleMessageInput(event) {
      if (event.key === 'Enter') {
        addMessage();
      }
    }

    async function addMessage() {
      const input = document.getElementById('message-input');
      const message = input.value.trim().toUpperCase();
      
      if (!message) {
        showNotification('Please enter a message', 'warning');
        return;
      }
      
      try {
        const response = await fetch('/api/messages', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showNotification('Message added to queue!', 'success');
          input.value = '';
          updateCharCounter();
          setTimeout(() => location.reload(), 1000);
        } else {
          showNotification(data.error || 'Failed to add message', 'error');
        }
      } catch (error) {
        showNotification('Network error', 'error');
      }
    }

    function previewMessage(message) {
      document.getElementById('message-input').value = message;
      updateCharCounter();
      showNotification('Message loaded for preview', 'info');
    }

    async function rotateQueue() {
      try {
        const response = await fetch('/api/rotate', {
          method: 'POST'
        });
        
        if (response.ok) {